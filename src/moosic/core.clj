(ns moosic.core)

;; Symbols: ♯ ♭ ° ♮ +

(def h  1) ; half-step
(def W  2) ; whole-ste
(def Wh 3) ; whole-and-half-step

(defn- rotate [n s]
  (let [shift (mod n (count s))]
    (concat (drop shift s)
            (take shift s))))

;; http://musictheoryblog.blogspot.com.au/2007/01/intervals.html
;; 
(def pitch-intervals
  ;;;  °      m    Perfect  Maj     +    semitone  name
  [#{ :d2          :R :P1               } ; 0      unison
   #{        :m2                   :A1  } ; 1      minor second
   #{ :d3                   :M2         } ; 2      major second
   #{        :m3                   :A2  } ; 3      minor third
   #{ :d4                   :M3         } ; 4      major third
   #{               :P4            :A3  } ; 5      perfect fourth
   #{ :d5                          :A4  } ; 6      tritone
   #{ :d6           :P5                 } ; 7      perfect fifth
   #{        :m6                   :A5  } ; 8      minor sixth
   #{ :d7                   :M6         } ; 9      major sixth
   #{        :m7                   :A6  } ; 10     minor seventh
   #{ :d8                   :M7         } ; 11     major seventh
   #{ :d9           :P8            :A7  } ; 12     octave
   #{        :m9                   :A8  } ; 13     minor ninth (octave + minor second)
   #{ :d10                  :M9         } ; 14     major ninth (octave + major second)
   #{        :m10                       } ; 15     minor tenth (octave + minor third)
   #{ :d11                  :M10        } ; 16     major tenth (octave + major third)
   #{               :P11           :A10 } ; 17     perfect eleventh (octave + perfect fourth)
   #{ :d12                         :A11 } ; 18     - (octave + tritone)
   #{ :d13          :P12                } ; 19     perfect twelfth / tritave (octave + perfect fifth)
   #{        :m13                  :A12 } ; 20     minor thirteenth (octave + minor sixth)
   #{ :d14                  :M13        } ; 21     major thirteenth (octave + major sixth)
   #{        :m14                  :A13 } ; 22     minor fourteenth (octave + minor seventh)
   #{ :d15                  :M14        } ; 23     major fourteenth (octave + major seventh)
   #{               :P15           :A14 } ; 24     perfect fifteench / double octave
   #{                              :A15 }])

;; define a top-level var for each interval identifier set to its semitone interval
(for [[i intervals] (map-indexed #(vec %&) pitch-intervals)
      int intervals]
  (eval (list 'def (symbol (name int)) i)))

;; All valid note names
(def note-names
  #{:C :C♯
    :D♭ :D :D♯
    :E♭ :E
    :F :F♯
    :G♭ :G :G♯
    :A♭ :A :A♯
    :B♭ :B})

(def ordered-notes
  [#{:C} #{:C♯ :D♭}
   #{:D} #{:D♯ :E♭}
   #{:E}
   #{:F} #{:F♯ :G♭}
   #{:G} #{:G♯ :A♭}
   #{:A} #{:A♯ :B♭}
   #{:B}])

(defn note-series
  "Returns an infinite sequence of chromatic notes starting with 'C' or the
  provided `start` note"
  ([] (cycle ordered-notes))
  ([start]
   (if-let [valid-start (start note-names)]
     (drop-while (complement valid-start)
                 (note-series))
     '() ; otherwise empty list
     )))


(def scales
  ;; modes are the diatonic scales, which can be generated by successive perfect fifths
  (let [modes (reduce-kv #(assoc %1
                                 (keyword "mode" (name %3)) ; e.g. :mode/lydian
                                 (vec (rotate %2 [W W h W W W h])))
                         {}
                         [:ionian :dorian :phrygian :lydian
                          :mixolydian :aeolian :locrian])

        scales {:chromatic      [h h h h h h h h h h h h]
                :major          (:mode/ionian modes)
                :minor/natural  (:mode/aeolian modes)
                :minor/melodic  [W h W W W W h] ; though in descending melodies, natural minor is played
                :minor/harmonic [W h W W h Wh h]}]
        (merge scales modes)))

;; (defn parse-chord [s]
;;   (let [accidentals {"#" :♯
;;                      "b" :♭
;;                      "♯" :♯
;;                      "♭" :♭
;;                      "♮" nil}
;;         chords {"M"   :Maj
;;                 "maj" :Maj}]))

;; Maps chord descriptors to a series of intervals to apply to the notes
;;
;; http://www.smithfowler.org/music/Chord_Formulas.htm
;;
;; TODO: expand notation
;;    major = Maj M
;;    minor = min m
;;    major 7 = Δ
;;    minor 7 = -7
;;    diminished = ° dim

;; Chord names represented as component intervals from root
(def chords
  {:Maj     [R M3 P5]
   :add4    [R M3 P5 P4]
   :sus2    [R    P5 M2]
   :sus4    [R    P5 P4]
   :5       [R    P5]
   :6       [R M3 P5 P6]
   :69      [R M3 P5 P6 M9]
   

   ;;; 7th chords (https://en.wikipedia.org/wiki/Seventh_chord)
   ;; Formally named by type of triad and type of seventh. If both types are
   ;; identical, the chord is abbreviated by the type once (e.g. m7 instead of
   ;; minor-minor 7).
   ;;   E.g. m/Maj7 = minor triad with a major 7
   ;;        dim7   = dim triad with dim 7
   :Maj7     [R M3 P5 M7]
   :m7       [R m3 P5 m7]
   :7        [R M3 P5 m7] ; dominant 7th / major-minor 7th
   :m/Maj7♭5 [R m3 d5 M7] ; diminished major 7th
   :m7♭5     [R m3 d5 m7] ; half diminished 7th (ø)
   :dim7     [R m3 d5 d7] ; diminished 7th
   :m/Maj7   [R m3 P5 M7] ; minor-major seventh
   :+Maj7    [R M3 A5 M7] ; augmented major 7th
   :+7       [R M3 A5 m7] ; augmented(/minor) 7th
   :7♭5      [R M3 d5 m7] ; dominant seventh flat 5

   ;; 9th chords
   :Maj9    [R M3 P5 M7 M9]
   :m9      [R m3 P5 m7 M9]
   :7♭9     [R M3 P5 m7 m9] ; dominant minor ninth
   :add9    [R M3 P5    M9] ; no 7th

   ;; 11th chords (https://en.wikipedia.org/wiki/Eleventh_chord)
   :11 [] ; dominant 11th
   :Maj11 []
   :m11 []
   ;; :Maj11   {:major          '[1 3 5 (7) (9) 11]}
   ;; :Maj13   {:major          '[1 3 5 (7) (9) (11) 13]}
   ;; :#11     {:mode/lydian    [1 5 11]}
   ;; :Maj7#11 {:mode/lydian    [1 3 5 7 11]}

   ;; :m       {:minor/natural  [1 3 5]}
   ;; :madd4   {:minor/natural  [1 3 4 5]}
   ;; :m6      {:minor/melodic  [1 3 5 6]}
   ;; :m7      {:minor/natural  [1 3 5 7]}
   ;; :madd9   {:minor/natural  [1 3 5 7 9]}
   ;; :m69     {:minor/melodic  [1 3 5 9]}
   ;; :m9      {:minor/natural  [1 3 5 7 9]}
   ;; :m11     {:minor/natural  '[1 3 5 7 (9) 11]}
   ;; :m13     {:minor/melodic  '[1 3 5 7 (9) (11) 13]}
   ;; :m/Maj7  {:minor/harmonic [1 3 5 7]}
   ;; :m/Maj9  {:minor/harmonic [1 3 5 7 9]}
   ;; :m/Maj11 {:minor/harmonic '[1 3 5 7 (9) 11]}
   ;; :m/Maj13 {:minor/melodic  '[1 3 5 7 (9) (11) 13]}

   ;; ;; not sure how to do this with known minor scales
   ;; :m7-5 {} ; half-diminished 7th
   ;; :m7♭5 {}
   ;; :ø {}

   ;; :° {} ; 1 b3 b5
   ;; :°7 {} ; 1 b3 b5 bb7
   ;; :+ {} ; 1 3 #5

   ;; :♭5 {} ; 1 b5
    })

(defn derive-scale
  "Given an interval template and a series of notes starting with the root,
  return a sequence of the notes matching the provided interval template."
  [intervals notes]

  (when (and (seq notes) (seq intervals))
    (let [[interval & intervals] intervals
          [[note _] notes] (split-at interval notes)]
      (cons note (lazy-seq (derive-scale intervals notes))))))

(defn scale
  "Provided a key and a scale, returns the scale.

  E.g.:

  > (scale :F♯ :minor/natural)
  (#{:F♯ :G♭} #{:G} #{:G♯ :A♭} #{:A} #{:A♯ :B♭} #{:B}
   #{:C} #{:C♯ :D♭} #{:D} #{:D♯ :E♭} #{:E} #{:F})"
  [tonic scale]

  (if-let [template (scale scales)]
    (derive-scale template (note-series tonic))))

(defn chord
  [root chord]

  (if-let [[[based-on-scale intervals]] (seq (chord chords))]
    (let [scale (cycle (scale root based-on-scale))
          notes (map (partial nth scale) intervals)]
      (map first notes))))

(defn chord
  [root name]

  (if-let [intervals (chords name)]
    (let [notes (note-series root)]
      (map (comp first (partial nth notes)) intervals))))

;; a 24-fret guitar fretboard of notes
(def guitar
  (map (comp (partial take 24) note-series)
       [:E :A :D :G :B :E]))
