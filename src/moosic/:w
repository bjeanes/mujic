(ns moosic.core)

;; Symbols: ♯ ♭ ° ♮ +

(def h  1) ; half-step
(def W  2) ; whole-ste
(def Wh 3) ; whole-and-half-step

(defn- rotate [n s]
  (let [shift (mod n (count s))]
    (concat (drop shift s)
            (take shift s))))

;; http://musictheoryblog.blogspot.com.au/2007/01/intervals.html
;; 
(def pitch-intervals
  {:P1 0 :d2 0
   :m2 1 :A1 1
   :M2 2 :d3 2
   :m3 3 :A2 3
   :M3 4 :d4 4
   :P4 5 :A3 5
   :A4 6 :d5 6
   :P5 7 :d6 7
   :m6 8 :A5 8
   :M6 9 :d7 9
   :m7 10 :A6 10
   :M7 11 :d8 11
   :P8 12 :A7 12

   :unison                0

   :second/diminished     0
   :second/minor          1
   :second/major          2

   :third/minor           3
   :third/major           4

   :fourth/diminished     4
   :fourth/perfect        5
   :fourth/augmented      6

   :fifth/diminished      6
   :fifth/perfect         7
   :fifth/augmented       8

   :sixth/diminished      7
   :sixth/minor           8
   :sixth/major           9
   :sixth/augmented       10

   :seventh/diminished    9
   :seventh/minor         10
   :seventh/major         11
   :seventh/augmented     12

   :octave                12
   :octave/augmented      13
   :eigth/augmented       13

   :ninth/diminished      12
   :ninth/minor           13
   :ninth                 14
   :ninth/augmented       15

   :tenth/diminished      14
   :tenth/minor           15
   :tenth                 16
   :tenth/major           16
   :tenth/augmented       17

   :eleventh/diminished   16
   :eleventh              17
   :eleventh/perfect      17
   :eleventh/augmented    18

   :twelfth/diminished    18
   :twelfth               19
   :twelfth/perfect       19
   :twelfth/augmented     20

   :thirteenth/diminished 19
   :thirteenth/minor      20
   :thirteenth            21
   :thirteenth/major      21
   :thirteenth/augmented  22})

;; All valid note names
(def note-names
  #{:C :C♯
    :D♭ :D :D♯
    :E♭ :E
    :F :F♯
    :G♭ :G :G♯
    :A♭ :A :A♯
    :B♭ :B})

(def ordered-notes
  [#{:C} #{:C♯ :D♭}
   #{:D} #{:D♯ :E♭}
   #{:E}
   #{:F} #{:F♯ :G♭}
   #{:G} #{:G♯ :A♭}
   #{:A} #{:A♯ :B♭}
   #{:B}])

(defn note-series
  "Returns an infinite sequence of chromatic notes starting with 'C' or the
  provided `start` note"
  ([] (cycle ordered-notes))
  ([start]
   (if-let [valid-start (start note-names)]
     (drop-while (complement valid-start)
                 (note-series))
     '() ; otherwise empty list
     )))

(def scales
  ;; modes are the diatonic scales, which can be generated by successive perfect fifths
  (let [modes (reduce-kv #(assoc %1
                                 (keyword "mode" (name %3)) ; e.g. :mode/lydian
                                 (vec (rotate %2 [W W h W W W h])))
                         {}
                         [:ionian :dorian :phrygian :lydian
                          :mixolydian :aeolian :locrian])

        scales {:chromatic      [h h h h h h h h h h h h]
                :major          (:ionian modes)
                :minor/natural  (:aeolian modes)
                :minor/melodic  [W h W W W W h] ; though in descending melodies, natural minor is played
                :minor/harmonic [W h W W h Wh h]}]
        (merge scales modes)))

(defn parse-chord [s]
  (let [accidentals {"#" :♯
                     "b" :♭
                     "♯" :♯
                     "♭" :♭
                     "♮" nil}
        chords {"M"   :Maj
                "maj" :Maj}])
  )

;; Maps chord descriptors to a series of intervals to apply to the notes
;;
;; http://www.smithfowler.org/music/Chord_Formulas.htm
(def chords
  '{:Maj     {:major          [1 3 5]}
    :add4    {:major          [1 3 4 5]}
    :6       {:major          [1 3 5 6]}
    :69      {:major          [1 3 5 6 9]}
    :Maj7    {:major          [1 3 5 7]}
    :Maj9    {:major          [1 3 5 (7) 9]}
    :Maj11   {:major          [1 3 5 (7) (9) 11]}
    :Maj13   {:major          [1 3 5 (7) (9) (11) 13]}
    :sus4    {:major          [1 4 5]}
    :sus     {:major          [1 4 5]}
    :sus2    {:major          [1 2 5 (9)]}
    :2       {:major          [1 2 5 (9)]}
    :5       {:major          [1 5]}
    :#11     {:mode/lydian    [1 5 11]}
    :Maj7#11 {:mode/lydian    [1 3 5 7 11]}

    :m       {:minor/natural  [1 3 5]}
    :madd4   {:minor/natural  [1 3 4 5]}
    :m6      {:minor/melodic  [1 3 5 6]}
    :m7      {:minor/natural  [1 3 5 7]}
    :madd9   {:minor/natural  [1 3 5 7 9]}
    :m69     {:minor/melodic  [1 3 5 9]}
    :m9      {:minor/natural  [1 3 5 7 9]}
    :m11     {:minor/natural  [1 3 5 7 (9) 11]}
    :m13     {:minor/melodic  [1 3 5 7 (9) (11) 13]}
    :m/Maj7  {:minor/harmonic [1 3 5 7]}
    :m/Maj9  {:minor/harmonic [1 3 5 7 9]}
    :m/Maj11 {:minor/harmonic [1 3 5 7 (9) 11]}
    :m/Maj13 {:minor/melodic  [1 3 5 7 (9) (11) 13]}

    ;; not sure how to do this with known minor scales
    :m7-5 {}
    :m7♭5 {}
    :ø {}

    :° {} ; 1 b3 b5
    :°7 {} ; 1 b3 b5 bb7
    :+ {} ; 1 3 #5

    :♭5 {} ; 1 b5
    })

(defn derive-scale
  "Given an interval template and a series of notes starting with the root,
  return a sequence of the notes matching the provided interval template."
  [intervals notes]

  (when (and (seq notes) (seq intervals))
    (let [[interval & intervals] intervals
          [[note _] notes] (split-at interval notes)]
      (cons note (lazy-seq (derive-scale intervals notes))))))

(defn scale
  "Provided a key and a scale, returns the scale.

  E.g.:

  > (scale :F♯ :minor/natural)
  (#{:F♯ :G♭} #{:G} #{:G♯ :A♭} #{:A} #{:A♯ :B♭} #{:B}
   #{:C} #{:C♯ :D♭} #{:D} #{:D♯ :E♭} #{:E} #{:F})"
  [tonic scale]

  (if-let [template (scale scales)]
    (derive-scale template (note-series tonic))))

(defn chord
  [key chord]

  (if-let [[[based-on-scale intervals]] (seq (chord chords))]
    (let [scale (cycle (scale key based-on-scale))
          notes (map (comp (partial nth scale) dec) intervals)]
      (map first notes))))

;; a 24-fret guitar fretboard of notes
(def guitar
  (map (comp (partial take 24) note-series)
       [:E :A :D :G :B :E]))
