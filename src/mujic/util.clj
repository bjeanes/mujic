(ns mujic.util)

(defn rotate [n s]
  (let [shift (mod n (count s))]
    (into (empty s)
          (concat (drop shift s)
                  (take shift s)))))

(defn rotations
  "Returns a sequence generated by rotating finite
  sequence s repeatedly until the original order is
  encountered."
  [s]
  (take (count s)
        (iterate (partial rotate 1) s)))

(defn take-nths
  "Takes a collection and returns the values of each interval
  from the previous value (or start). Always includes the first
  item.

  Named due to similarity with take-nth, with stable n:

      (take-nth          2  (range)) ;=> (0 2 4 6 8 10 ...)
      (take-nths (repeat 2) (range)) ;=> (0 2 4 6 8 10 ...)
  "
  [ns coll]
  (let [indices (reductions + 0 ns)]
    (map (partial nth coll) indices)))

(defn map-values
  [f m]
  (into {}
        (map (fn [[k v]] [k (f v)])
             m)))
